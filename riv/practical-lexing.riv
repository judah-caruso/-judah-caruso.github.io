/ compilers

PRACTICAL LEXING


	typedef enum {
		TOKEN_KIND_INVALID;
		TOKEN_KIND_EOF;
		
		TOKEN_KIND_IDENT;
		TOKEN_KIND_NUMBER;
		
		TOKEN_KIND_PLUS;
		TOKEN_KIND_MINUS;
		TOKEN_KIND_STAR;
		TOKEN_KIND_FSLASH;
	} TokenKind;
	
	typedef struct {
		TokenKind  Kind;
		char*      Str;
		long long Len;
	} Token;


	typedef struct {
		char*     Source;
		long long Len;
		long long Offset;
	} LexerState;
	
	static int StartsNumber(char c) {
		return (c >= '0' && c <= '9');
	}
	static int ContinuesNumber(char c) {
		return StartsNumber(c) || c == '.';
	}
	
	static int StartsIdent(char c) {
		return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_';
	}
	static int ContinuesIdent(char c) {
		return StartsIdent(c) || StartsNumber(c);
	}
	
	char LexerPeek(LexerState* state) {
		if (state->Offset > state->Len) {
			return 0;
		}
		
		return state->Source[state->Offset];
	}
	
	char LexerConsume(LexerState* state) {
		char c = LexerPeek(state);
		if (c == 0) {
			return 0;
		}
		
		state->Offset += 1;
		return c;
	}
	
	Token LexerNext(LexerState* state) {
		char c = LexerPeek(state);
		if (c == 0) {
			return (Token){ .Kind = TOKEN_KIND_EOF };
		}
		
		Token t = (Token){ .Str = &state->Source + state->Offset, .Len = 0 };
		if (StartsIdent(c)) {
			while (state->Offset < state->Len) {
				c = LexerPeek(state);
				if (!ContinuesIdent(c)) {
					break;
				}
				
				LexerNext(state);
			}
			
			t.Kind = TOKEN_KIND_IDENT;
			t.Len  = (&state->Source + state->Offset) - t.Str;	
			return t;
		}	
		
		if (StartsNumber(c)) {
			while (state->Offset < state->Len) {
				c = LexerPeek(state);
				if (!ContinuesNumber(c)) {
					break;
				}
				
				LexerNext(state);
			}
			
			t.Kind = TOKEN_KIND_NUMBER;
			t.Len  = (&state->Source + state->Offset) - t.Str;	
			return t;
		}
		
		t.Len = 1;
		
		switch (c) {
			case '+': t.Kind = TOKEN_KIND_PLUS;   break;
			case '-': t.Kind = TOKEN_KIND_MINUS;  break;
			case '*': t.Kind = TOKEN_KIND_STAR;   break;
			case '/': t.Kind = TOKEN_KIND_FSLASH; break;
			
			default: t.Kind = TOKEN_KIND_INVALID; break;
		}
		
		return t;
	}
